html {
	box-sizing: border-box;
	background: rgba(240,240,240,1);
}
body {
	font-size: 22px;
	line-height: 34px;
}


h1,h2 {
	font-family: Arial, Helvetica, sans-serif;
}

header, nav {
	font-family: Arial,Helvetica,sans-serif;
}




@media <media-query-list> {
  /* Условия при которых выполняется код */
}
card

@media print {
  body {
    font-size: 10pt;
  }
}

@media screen {
  body {
    font-size: 20px;
  }
}

@media screen, print {
  body {
    line-height: 1.2;
  }
}



.row {
	display: flex;
	flex-flow:wrap;
}

.col-1, .col-2,.col-3, .col-4, .col-5,.col-6,.col-7,.col-8,.col-9,.col-10,.col-11,.col-11 {
	box-sizing: border-box;
}


.col-1{flex-basis:8.3333%;}
.col-2{flex-basis:16.6667%;}
.col-3{flex-basis:24.9999%;}
.col-4{flex-basis:33.33333%;}
.col-5{flex-basis:41.6665%;}
.col-6{flex-basis:49.9998%;}
.col-7{flex-basis:58.3331%;}
.col-8{flex-basis:66.6664%;}
.col-9{flex-basis:74.9997%;}
.col-10{flex-basis:83.3333%;}
.col-11{flex-basis:91.6663%;}
.col-12{flex-basis:100%;}


@media (min-width: 768px) {
  body {
    display:block;
  }
  h1 {
	font-size:26px;
  }
}

@media (min-width: 992px) {
  body {
    color: green;
  }
}

@media (min-width: 1200px) {
	body {
		color: rgba(100,100,100,1);
	}
}

.card {

	border:none;
	margin-bottom: 20px;
	text-align: center;
}

.card-search {
	justify-content: flex-start;
	border-bottom: 2px solid lightgray;
}

.container {
	margin: 0 auto;
	width:976px;


	/*Необходим для фиксации ширины контента*/

	/*Второе тоже: мы делаем класс .container с шириной 992 - 16 пикселей. Что? Откуда эти значения?

992 пикселя это константа — в последнее время дизайнеры верстают десктопные макеты именно с такой шириной,

16 пикселей это паддинги слева и справа у колонок.

992-16=976 пикселей должна быть ширина нашего контейнера.

*/
}

.item {
	order: <integer>;
}

header.container {
	background-color: white;
	border-radius: 2px;
}

header .row {
	justify-content: space-between;
}

.about-me {
	padding: 10px;
	border-bottom: 2px solid blue;
	font-family: "Times New Roman", Times, serif;
}

.main-section {
	color:lightgray;
	font-family: 'Robotic';
	margin: 0 10px;
}

.org-name {
	font-family: Times New Roman sens-serif;
	font-weight: lighter;
}
.green-eats {
	color:green;
	font-family: sens-serif;
}
.black-eats {
	color:black;
	font-weight: bold;
}

.header-button {
	height:70px;
	width:110px;
	margin:15px 20px;
	border: 2px solid lightgray;
	border-radius: 5px;
}

.register-button {
background-color: black;
color:white;
margin-left:-6px;
}
.signin-button {
background-color: white;
color:black;
}

.search {
	width:500px;
	margin-top: 60px;
	font-family: Times New Roman sens-serif;
	text-align: left;
	margin-bottom: 10px;
	background: rgba(240,240,240,1);
	border:none;
}

.when-button {
	height:70px;
	width:110px;
	margin:15px 20px;
	border: 2px solid;
	border-color: lightgray;
	border-radius: 5px;
	background: rgba(240,240,240,1);
	margin: 0px;
}
.to-button {
	height:70px;
	width:420px;
	margin:15px 20px;
	border: 2px solid;
	border-color: lightgray;
	border-radius: 5px;
	background: rgba(240,240,240,1);
	margin: 0px;
}

.restaurants-name {
	margin-top:	100px;
	margin-bottom: 40px;
	color:rgba(50,50,50,1);
}
.timed-class{
	color:rgba(50,50,50,1);
}

.main-image {
	//
}

.main-footer {
	background: rgba(40,40,40,1);
	padding-top:50px;
}

.footer-middle {
	padding:0 10px;
}
.footer-logo {
	border-bottom: 2px solid lightgray;
	padding-bottom: 40px;
}

.footer-select {
	margin: 30px 0;
	width:170px;
	height: 50px;
	border:1px solid rgba(60,60,60,1);;
	border-radius: 2px;
	background: rgba(60,60,60,1);
	color: rgba(240,240,240,1);
}

/*


This defines the alignment along the main axis. It helps distribute extra free space 
left over when either all the flex items on a line are inflexible, or are flexible 
but have reached their maximum size. 
It also exerts some control over the alignment of items when they overflow the line.
.container {
  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
}

.item{
	align-self:auto | flex-start | flex-end | center | baseline | stretch;
}

.itemP
justify-content: flex-start | flex-end | center | space-between | space-around;


.container {
  flex-direction: row | row-reverse | column | column-reverse;

  row (default): left to right in ltr; right to left in rtl
	row-reverse: right to left in ltr; left to right in rtl
	column: same as row but top to bottom
	column-reverse: same as row-reverse but bottom to top


	.item {
  flex-grow: <number>;  default 0 
}

By default, flex items will all try to fit onto one line. 
You can change that and allow the items to wrap as needed with this property.
.container{
  flex-wrap: nowrap | wrap | wrap-reverse;
}
*/
